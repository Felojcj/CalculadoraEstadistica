{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","state","item","number","items","handleAddNumber","e","preventDefault","target","value","setState","prevState","reset","this","numbers","map","className","onSubmit","required","type","step","name","id","placeholder","key","length","stats","median","mean","mode","stdev","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAiEeA,G,iNA5DbC,MAAQ,CACNC,KAAM,CACJC,OAAQ,GAEVC,MAAO,I,EAGTC,gBAAkB,SAACC,GACjBA,EAAEC,iBAEF,IAAML,EAAO,CACXC,OAAQG,EAAEE,OAAOL,OAAOM,OAG1B,EAAKC,UAAS,SAACC,GACb,MAAO,CACLP,MAAM,GAAD,mBAAMO,EAAUP,OAAhB,CAAuBF,QAIhCI,EAAEE,OAAOI,S,wEAGD,IACAR,EAAUS,KAAKZ,MAAfG,MACFU,EAAUV,EAAMW,KAAI,SAACb,GAAD,OAAeA,EAAKC,UAE9C,OACE,yBAAKa,UAAU,OACb,yBAAKA,UAAU,cACb,wBAAIA,UAAU,sBAAd,+BAEF,yBAAKA,UAAU,YACb,0BAAMC,SAAUJ,KAAKR,gBAAiBW,UAAU,kBAC9C,2BAAOE,UAAQ,EAACC,KAAK,SAASC,KAAK,MAAMC,KAAK,SAASC,GAAG,SAASC,YAAY,uBAAuBP,UAAU,yBAChH,4BAAQG,KAAK,SAASH,UAAU,yBAAhC,YAEF,4BACGZ,EAAMW,KAAI,SAACb,GAAD,OACT,wBAAIsB,IAAKtB,EAAKC,QAAd,wBAAyCD,EAAKC,aAIpD,6BACE,4CAECW,EAAQW,QAAU,GACjB,4BACE,sCAAYC,IAAMC,OAAOb,GAAzB,KACA,wCAAcY,IAAME,KAAKd,GAAzB,KACA,qCAAWY,IAAMG,KAAKf,GAAtB,KACA,uDAA0BY,IAAMI,MAAMhB,GAAtC,Y,GApDIiB,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD+H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9481489d.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport stats from 'stats-lite'\nimport './App.scss'\n\nclass App extends React.Component {\n  state = {\n    item: {\n      number: 0,\n    },\n    items: [],\n  }\n\n  handleAddNumber = (e: any) => {\n    e.preventDefault()\n\n    const item = {\n      number: e.target.number.value,\n    }\n\n    this.setState((prevState: any) => {\n      return {\n        items: [...prevState.items, item],\n      }\n    })\n\n    e.target.reset()\n  }\n\n  render() {\n    const { items } = this.state\n    const numbers = items.map((item: any) => item.number)\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h2 className=\"App-header__tittle\">Calculadora estadística</h2>\n        </div>\n        <div className=\"App-body\">\n          <form onSubmit={this.handleAddNumber} className=\"App-body__form\">\n            <input required type=\"number\" step=\"any\" name=\"number\" id=\"number\" placeholder=\"Escriba un numero...\" className=\"App-body__form-input\"/>\n            <button type=\"submit\" className=\"App-body__form-button\">Agregar</button>\n          </form>\n          <ul>\n            {items.map((item: any) => (\n              <li key={item.number}>Número Ingresado: {item.number}</li>\n            ))}\n          </ul>\n        </div>\n        <div>\n          <h3>Resultados: </h3>\n\n          {numbers.length >= 1 && (\n            <ul>\n              <li>Media: {stats.median(numbers)} </li>\n              <li>Mediana: {stats.mean(numbers)} </li>\n              <li>Moda: {stats.mode(numbers)} </li>\n              <li>Desviación estandar: {stats.stdev(numbers)} </li>\n            </ul>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}